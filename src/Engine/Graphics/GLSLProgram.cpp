#include "GLSLProgram.hpp"

#include <fstream>
#include <string>

GLint GetUniformLocation(GLuint shaderProgramID, const GLchar* name) {
	GLint result = glGetUniformLocation(shaderProgramID, name);
	if (result == -1) LOG_ERROR(name << " is not a valid uniform variable!");
	else if (result == GL_INVALID_INDEX) LOG_ERROR(name << " is not a uniform variable(may have been optimized out by GLSL");
	else if (result == GL_INVALID_VALUE) LOG_ERROR("GPU_Program was not a value generated by OpenGL when trying to get location of uniform" << name);
	else if (result == GL_INVALID_OPERATION) LOG_ERROR("Invalid shader program provided when getting location of uniform " << name);
	return result;
}


bool ParseGLSLShader(const std::string& filename, std::string& outFile) {
	std::ifstream fileStream(filename);
	if (!fileStream.is_open()) {
		LOG_ERROR("Failed to open shader file: " << filename);
		return false;
	}
	std::string line;
	while (getline(fileStream, line)) {
		//Check if the file has a include directive
		if (line.find("#") != std::string::npos) {
			if (line.find("include") != std::string::npos) {
				size_t begin = line.find("<") + 1;
				size_t end = line.find(">") - begin;
				std::string includeFilename = line.substr(begin, end);
				std::string includeFile;
				ParseGLSLShader(includeFilename, includeFile);
				outFile.append(includeFile);
				continue;	//Dont add the include line...
			}
		}
		outFile.append(line);
		outFile.append("\n");
	}

	fileStream.close();
	return true;
}

GLuint CompileShader(const char* source, GLenum shaderType) {
	GLuint shaderID = glCreateShader(shaderType);
	glShaderSource(shaderID, 1, &source, NULL);
	glCompileShader(shaderID);
	GLint success;
	GLchar infoLog[GLSL_LOG_SIZE];
	glGetShaderiv(shaderID, GL_COMPILE_STATUS, &success);
	if (!success) {
		glGetShaderInfoLog(shaderID, GLSL_LOG_SIZE, NULL, infoLog);
		auto shaderName = (shaderType == GL_VERTEX_SHADER) ? "VertexShader" : "FragmentShader";
		LOG_ERROR(shaderName << " compilation failed! \n" << infoLog);
		return 0;
	}
	return shaderID;
}

GLuint LoadShaderFromSource(const char* vertexShaderSource, const char* fragmentShaderSource) {
	GLuint vertexShaderID   = CompileShader(vertexShaderSource, GL_VERTEX_SHADER);
	GLuint fragmentShaderID = CompileShader(fragmentShaderSource, GL_FRAGMENT_SHADER);

	GLuint programID = glCreateProgram();
	glAttachShader(programID, vertexShaderID);
	glAttachShader(programID, fragmentShaderID);
	glLinkProgram(programID);

	GLint success;
	GLchar infoLog[GLSL_LOG_SIZE];
	glGetProgramiv(programID, GL_LINK_STATUS, &success);
	if (!success) {
		glGetProgramInfoLog(programID, GLSL_LOG_SIZE, NULL, infoLog);
		LOG_ERROR("SHADER PROGRAM LINK: " << infoLog);
		return 0;
	}
	glDetachShader(programID, vertexShaderID);
	glDetachShader(programID, fragmentShaderID);
	glDeleteShader(vertexShaderID);
	glDeleteShader(fragmentShaderID);
	return programID;
}


GLuint DEBUGLoadShaderFromFile(const std::string& vertexFilename, const std::string& fragmentFilename) {
	std::string vertexShaderSource, fragmentShaderSource;
	ParseGLSLShader(vertexFilename, vertexShaderSource);
	ParseGLSLShader(fragmentFilename, fragmentShaderSource);
	return LoadShaderFromSource(vertexShaderSource.c_str(), fragmentShaderSource.c_str());
}

