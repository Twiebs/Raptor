
// layout (location = 0) in vec3 position;
// layout (location = 1) in vec3 normal;
// layout (location = 2) in vec2 texCoord;
// layout (location = 3) in vec3 tangent;
//
// layout (location = 0) uniform mat4 modelMatrix;
// layout (location = 1) uniform mat4 viewMatrix;
// layout (location = 2) uniform mat4 projectionMatrix;
//
// #include <include/normalmap_vert.glsl>
//
// out VertexOut {
//   vec3 worldPos;
//   vec3 normal;
//   vec3 tangent;
//   mat3 tbn;
//   vec2 texCoord;
// } result;
//
//
//
// void main() {
//   CalculateTBNMatrix(result.tbn);
//
//   vec4 worldPos = modelMatrix * vec4(position, 1.0f);
//   result.worldPos = worldPos.xyz;
//
//   result.normal = normal;
//   result.tangent = tangent;
//   result.texCoord = texCoord;
//
//   gl_Position = projectionMatrix * viewMatrix * worldPos;
// }


// #include <include/deferred.glsl>
//

//
// in VertexOut {
//   vec3 worldPos;
//   vec3 normal;
//   vec3 tangent;
//   mat3 tbn;
//   vec2 texCoord;
// } input;
//
// vec3 GetNormal () {
// 	vec3 result;
// 	result = texture(normalSampler, input.texCoord).rgb; // Get normal from normal_map
//   if (result == vec3(0.0)) return input.normal;
//
// 	result = normalize((result * 2.0) - 1.0); // Map the Normal to [-1, 1]
//     result = normalize(input.tbn * result); // Transform the normal into worldSpace
// 	return result;
// }
//
//
// void main () {
//   vec3 sampledDiffuseColor = texture(diffuseSampler, input.texCoord).rgb;
//
//
//   SetPosition(input.worldPos);
//   SetNormal(input.normal);
//   SetColor(sampledDiffuseColor);
//   SetSpecular(texture(specularSampler, input.texCoord).r);
//   SetDepth(LinearizeDepth(gl_FragCoord.z));
// }
